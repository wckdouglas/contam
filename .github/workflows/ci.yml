name: CI

on:
  push:
    branches: 
      - 'main'
  pull_request:
    branches: 
      - 'main'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build-and-test-python:
    name: python CI
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9.7

      - name: Install poetry
        uses: Gr1N/setup-poetry@v4
        with:
          poetry-version: 1.1.4

      - name: Install dependencies
        run: |
          poetry install -E dev

      - name: Install package
        run: |
          poetry run python setup.py install

      - name: Unit test
        run: |
          poetry run coverage run -m pytest -l  -rPap -vvv -p no:warnings  --cov-report term-missing --cov-report html --cov .
        
      - name: type check
        run: |
          poetry run mypy diploid_contam

      - name: formatting
        run: |
          poetry run black --check .
          poetry run isort --check .

  build-and-test-rust:
    name: Rust CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: CI -- test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: CI -- lint
        uses: actions-rs/cargo@v1
        with:
          command: clippy

      - name: CI -- format
        uses: actions-rs/cargo@v1
        with:
          command: fmt

      - name: CI -- end-to-end
        env: 
          RUST_LOG: info
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: -- -i data/test.vcf -o out.json -m 1000 --debug-variant-json variants.json --snv-only  --debug-json prob.json

      - name: CI -- end-to-end (no intermediate)
        env: 
          RUST_LOG: info
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: -- -i data/test.vcf -o out.json -m 1000

      - name: CI -- end-to-end (no intermediate w/ bed)
        env: 
          RUST_LOG: info
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: -- -i data/test.vcf.gz -o out.json -m 1000 -b data/test.bed


  build-and-push-image:
    needs: build-and-test-rust
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


